diff --git chromium-55.0.2883.75/third_party/WebKit/Source/platform/heap/StackFrameDepth.cpp.orig chromium-55.0.2883.75/third_party/WebKit/Source/platform/heap/StackFrameDepth.cpp
index 1d164f5..ca58bc1 100644
--- chromium-55.0.2883.75/third_party/WebKit/Source/platform/heap/StackFrameDepth.cpp.orig
+++ chromium-55.0.2883.75/third_party/WebKit/Source/platform/heap/StackFrameDepth.cpp
@@ -68,7 +68,7 @@ size_t StackFrameDepth::getUnderestimatedStackSize() {
 // FIXME: On Mac OSX and Linux, this method cannot estimate stack size
 // correctly for the main thread.
 
-#if defined(__GLIBC__) || OS(ANDROID) || OS(FREEBSD)
+#if OS(LINUX) || OS(ANDROID) || OS(FREEBSD)
   // pthread_getattr_np() can fail if the thread is not invoked by
   // pthread_create() (e.g., the main thread of webkit_unit_tests).
   // If so, a conservative size estimate is returned.
@@ -93,6 +93,9 @@ size_t StackFrameDepth::getUnderestimatedStackSize() {
   pthread_attr_destroy(&attr);
 #endif
 
+#if OS(LINUX) && !defined(__GLIBC__)
+  return 0;
+#else
   // Return a 512k stack size, (conservatively) assuming the following:
   //  - that size is much lower than the pthreads default (x86 pthreads has a 2M
   //    default.)
@@ -100,6 +103,7 @@ size_t StackFrameDepth::getUnderestimatedStackSize() {
   //    low as 512k.
   //
   return 512 * 1024;
+#endif
 #elif OS(MACOSX)
   // pthread_get_stacksize_np() returns too low a value for the main thread on
   // OSX 10.9,
@@ -135,7 +139,7 @@ size_t StackFrameDepth::getUnderestimatedStackSize() {
 }
 
 void* StackFrameDepth::getStackStart() {
-#if defined(__GLIBC__) || OS(ANDROID) || OS(FREEBSD)
+#if OS(LINUX) || OS(ANDROID) || OS(FREEBSD)
   pthread_attr_t attr;
   int error;
 #if OS(FREEBSD)
