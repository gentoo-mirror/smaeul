--- chromium-54.0.2840.59/base/trace_event/malloc_dump_provider.cc.orig	2016-05-08 08:04:01.166374018 +0200
+++ chromium-54.0.2840.59/base/trace_event/malloc_dump_provider.cc	2016-05-08 08:05:07.846264723 +0200
@@ -61,7 +61,7 @@ bool MallocDumpProvider::OnMemoryDump(co
   resident_size = stats.max_size_in_use;
   allocated_objects_size = all_heap_info.allocated_size;
   allocated_objects_count = all_heap_info.block_count;
-#else
+#elif defined(OS_LINUX) && defined(__GLIBC__)
   struct mallinfo info = mallinfo();
   DCHECK_GE(info.arena + info.hblkhd, info.uordblks);
 
--- chromium-54.0.2840.59/content/child/content_child_helpers.cc.orig	2016-05-08 08:05:37.415219394 +0200
+++ chromium-54.0.2840.59/content/child/content_child_helpers.cc	2016-05-08 08:06:27.110142484 +0200
@@ -24,7 +24,7 @@ namespace content {
 // though, this provides only a partial and misleading value.
 // Unfortunately some telemetry benchmark rely on it and these need to
 // be refactored before getting rid of this. See crbug.com/581365 .
-#if defined(OS_LINUX) || defined(OS_ANDROID)
+#if defined(OS_LINUX) && defined(__GLIBC__) || defined(OS_ANDROID)
 size_t GetMemoryUsageKB() {
   struct mallinfo minfo = mallinfo();
   uint64_t mem_usage =
diff --git a/content/renderer/render_thread_impl.cc.orig b/content/renderer/render_thread_impl.cc
index d569350..45866f8 100644
--- a/content/renderer/render_thread_impl.cc.orig
+++ b/content/renderer/render_thread_impl.cc
@@ -1839,15 +1839,17 @@ void RenderThreadImpl::RecordPurgeAndSuspendMetrics() const {
                           blink_stats.partitionAllocTotalAllocatedBytes / 1024);
   UMA_HISTOGRAM_MEMORY_KB("PurgeAndSuspend.Memory.BlinkGCKB",
                           blink_stats.blinkGCTotalAllocatedBytes / 1024);
-#if defined(OS_LINUX) || defined(OS_ANDROID)
+#if (defined(OS_LINUX) && defined(__GLIBC__)) || defined(OS_ANDROID)
   struct mallinfo minfo = mallinfo();
 #if defined(USE_TCMALLOC)
   size_t malloc_usage = minfo.uordblks;
 #else
   size_t malloc_usage = minfo.hblkhd + minfo.arena;
 #endif
-#else
+#elif defined(OS_MACOSX) || defined(OS_IOS) || defined(OS_WIN)
   size_t malloc_usage = GetMallocUsage();
+#else
+  size_t malloc_usage = 0;
 #endif
   UMA_HISTOGRAM_MEMORY_MB("PurgeAndSuspend.Memory.MallocMB",
                           malloc_usage / 1024 / 1024);
